/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/{% static 'assets/scripts/pages/ch_apexcharts.js":
/*!***************************************************!*\
  !*** ./src/{% static 'assets/scripts/pages/ch_apexcharts.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nwindow.Apex = {\n  chart: {\n    foreColor: '#999'\n  }\n};\nvar Apex = function () {\n  var trigoStrength = 3;\n  var iteration = 11;\n  var chart1 = function chart1() {\n    var optionsChart1 = {\n      chart: {\n        height: 350,\n        type: 'bar',\n        foreColor: '#999',\n        animations: {\n          enabled: true,\n          easing: 'linear',\n          dynamicAnimation: {\n            speed: 1000\n          }\n        },\n        dropShadow: {\n          enabled: true,\n          left: -14,\n          top: -10,\n          opacity: 0.05\n        },\n        events: {\n          animationEnd: function animationEnd(chartCtx) {\n            var newData = chartCtx.w.config.series[0].data.slice();\n            newData.shift();\n            window.setTimeout(function () {\n              chartCtx.updateOptions({\n                series: [{\n                  data: newData\n                }],\n                xaxis: {\n                  min: chartCtx.minX,\n                  max: chartCtx.maxX\n                },\n                subtitle: {\n                  text: parseInt(Apex.getRangeRandom({\n                    min: 1,\n                    max: 20\n                  })).toString() + '%'\n                }\n              }, false, false);\n            }, 300);\n          }\n        },\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        }\n      },\n      colors: ['#FCCF31', '#17ead9', '#f02fc2'],\n      grid: {\n        borderColor: \"#999\"\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 0\n      },\n      series: [{\n        name: 'Load Average',\n        data: Apex.generateMinuteWiseTimeSeries(new Date(\"12/12/2016 00:20:00\").getTime(), 12, {\n          min: 10,\n          max: 110\n        })\n      }],\n      title: {\n        text: 'Load Average',\n        align: 'left',\n        style: {\n          fontSize: '12px'\n        }\n      },\n      subtitle: {\n        text: '20%',\n        floating: true,\n        align: 'right',\n        offsetY: 0,\n        style: {\n          fontSize: '22px'\n        }\n      },\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shade: 'dark',\n          type: 'vertical',\n          shadeIntensity: 0.5,\n          inverseColors: false,\n          opacityFrom: 1,\n          opacityTo: 0.8,\n          stops: [0, 100],\n          gradientToColors: ['#F55555', '#6078ea', '#6094ea']\n        }\n      },\n      xaxis: {\n        type: 'datetime',\n        range: 2700000,\n        axisTicks: {\n          color: '#333'\n        },\n        axisBorder: {\n          color: \"#333\"\n        }\n      },\n      yaxis: {\n        decimalsInFloat: 2,\n        opposite: true,\n        labels: {\n          offsetX: -10\n        }\n      },\n      legend: {\n        show: true\n      }\n    };\n    var chartColumn = new ApexCharts(document.querySelector(\"#chart1\"), optionsChart1);\n    chartColumn.render();\n    setInterval(function () {\n      iteration++;\n      chartColumn.updateSeries([{\n        data: [].concat(_toConsumableArray(chartColumn.w.config.series[0].data), [[chartColumn.w.globals.maxX + 210000, Apex.getRandom()]])\n      }]);\n    }, 3000);\n  };\n  var chart2 = function chart2() {\n    var options = {\n      series: [{\n        name: 'Likes',\n        data: [4, 3, 10, 9, 29, 19, 22, 9, 12, 7, 19, 5, 13, 9, 17, 2, 7, 5]\n      }],\n      chart: {\n        height: 350,\n        type: 'line'\n      },\n      stroke: {\n        width: 7,\n        curve: 'smooth'\n      },\n      xaxis: {\n        type: 'datetime',\n        categories: ['1/11/2000', '2/11/2000', '3/11/2000', '4/11/2000', '5/11/2000', '6/11/2000', '7/11/2000', '8/11/2000', '9/11/2000', '10/11/2000', '11/11/2000', '12/11/2000', '1/11/2001', '2/11/2001', '3/11/2001', '4/11/2001', '5/11/2001', '6/11/2001']\n      },\n      title: {\n        text: 'Social Media',\n        align: 'left',\n        style: {\n          fontSize: \"16px\",\n          color: '#666'\n        }\n      },\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shade: 'dark',\n          gradientToColors: ['#FDD835'],\n          shadeIntensity: 1,\n          type: 'horizontal',\n          opacityFrom: 1,\n          opacityTo: 1,\n          stops: [0, 100, 100, 100]\n        }\n      },\n      markers: {\n        size: 4,\n        colors: [\"#FFA41B\"],\n        strokeColors: \"#fff\",\n        strokeWidth: 2,\n        hover: {\n          size: 7\n        }\n      },\n      yaxis: {\n        min: -10,\n        max: 40,\n        title: {\n          text: 'Engagement'\n        }\n      }\n    };\n    var chart = new ApexCharts(document.querySelector(\"#chart2\"), options);\n    chart.render();\n  };\n  var chart3 = function chart3() {\n    var options = {\n      series: [{\n        name: 'TEAM A',\n        type: 'column',\n        data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30]\n      }, {\n        name: 'TEAM B',\n        type: 'area',\n        data: [44, 55, 41, 67, 22, 43, 21, 41, 56, 27, 43]\n      }, {\n        name: 'TEAM C',\n        type: 'line',\n        data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\n      }],\n      chart: {\n        height: 350,\n        type: 'line',\n        stacked: false\n      },\n      stroke: {\n        width: [0, 2, 5],\n        curve: 'smooth'\n      },\n      plotOptions: {\n        bar: {\n          columnWidth: '50%'\n        }\n      },\n      fill: {\n        opacity: [0.85, 0.25, 1],\n        gradient: {\n          inverseColors: false,\n          shade: 'light',\n          type: \"vertical\",\n          opacityFrom: 0.85,\n          opacityTo: 0.55,\n          stops: [0, 100, 100, 100]\n        }\n      },\n      labels: ['01/01/2003', '02/01/2003', '03/01/2003', '04/01/2003', '05/01/2003', '06/01/2003', '07/01/2003', '08/01/2003', '09/01/2003', '10/01/2003', '11/01/2003'],\n      markers: {\n        size: 0\n      },\n      xaxis: {\n        type: 'datetime'\n      },\n      yaxis: {\n        title: {\n          text: 'Points'\n        },\n        min: 0\n      },\n      tooltip: {\n        shared: true,\n        intersect: false,\n        y: {\n          formatter: function formatter(y) {\n            if (typeof y !== \"undefined\") {\n              return y.toFixed(0) + \" points\";\n            }\n            return y;\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(document.querySelector(\"#chart3\"), options);\n    chart.render();\n  };\n  var chart4 = function chart4() {\n    var options = {\n      series: [44, 55, 41, 17, 15],\n      chart: {\n        type: 'donut'\n      },\n      responsive: [{\n        breakpoint: 480,\n        options: {\n          chart: {\n            width: 200\n          },\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }]\n    };\n    var chart = new ApexCharts(document.querySelector(\"#chart4\"), options);\n    chart.render();\n  };\n  var chart5 = function chart5() {\n    var options = {\n      series: [76, 67, 61, 90],\n      chart: {\n        height: 390,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          offsetY: 0,\n          startAngle: 0,\n          endAngle: 270,\n          hollow: {\n            margin: 5,\n            size: '30%',\n            background: 'transparent',\n            image: undefined\n          },\n          dataLabels: {\n            name: {\n              show: false\n            },\n            value: {\n              show: false\n            }\n          }\n        }\n      },\n      colors: ['#E84A67', '#17BA91', '#0080FE', '#F9A602'],\n      labels: ['Vimeo', 'Messenger', 'Facebook', 'LinkedIn'],\n      legend: {\n        show: true,\n        floating: true,\n        fontSize: '16px',\n        position: 'left',\n        offsetX: 60,\n        offsetY: 15,\n        labels: {\n          useSeriesColors: true\n        },\n        markers: {\n          size: 0\n        },\n        formatter: function formatter(seriesName, opts) {\n          return seriesName + \":  \" + opts.w.globals.series[opts.seriesIndex];\n        },\n        itemMargin: {\n          vertical: 3\n        }\n      },\n      responsive: [{\n        breakpoint: 480,\n        options: {\n          legend: {\n            show: false\n          }\n        }\n      }]\n    };\n    var chart = new ApexCharts(document.querySelector(\"#chart5\"), options);\n    chart.render();\n  };\n  var chart6 = function chart6() {\n    var options = {\n      series: [{\n        name: 'Website Blog',\n        type: 'column',\n        data: [440, 505, 414, 671, 227, 413, 201, 352, 752, 320, 257, 160]\n      }, {\n        name: 'Social Media',\n        type: 'line',\n        data: [23, 42, 35, 27, 43, 22, 17, 31, 22, 22, 12, 16]\n      }],\n      chart: {\n        height: 350,\n        type: 'line'\n      },\n      stroke: {\n        width: [0, 4]\n      },\n      title: {\n        text: 'Traffic Sources'\n      },\n      dataLabels: {\n        enabled: true,\n        enabledOnSeries: [1]\n      },\n      labels: ['01 Jan 2001', '02 Jan 2001', '03 Jan 2001', '04 Jan 2001', '05 Jan 2001', '06 Jan 2001', '07 Jan 2001', '08 Jan 2001', '09 Jan 2001', '10 Jan 2001', '11 Jan 2001', '12 Jan 2001'],\n      xaxis: {\n        type: 'datetime'\n      },\n      yaxis: [{\n        title: {\n          text: 'Website Blog'\n        }\n      }, {\n        opposite: true,\n        title: {\n          text: 'Social Media'\n        }\n      }]\n    };\n    var chart = new ApexCharts(document.querySelector(\"#chart6\"), options);\n    chart.render();\n  };\n  var chart7 = function chart7() {\n    var options = {\n      series: [{\n        name: 'Servings',\n        data: [44, 55, 41, 67, 22, 43, 21, 33, 45, 31, 87, 65, 35]\n      }],\n      annotations: {\n        points: [{\n          x: 'Bananas',\n          seriesIndex: 0,\n          label: {\n            borderColor: '#775DD0',\n            offsetY: 0,\n            style: {\n              color: '#fff',\n              background: '#775DD0'\n            },\n            text: 'Bananas are good'\n          }\n        }]\n      },\n      chart: {\n        height: 350,\n        type: 'bar'\n      },\n      plotOptions: {\n        bar: {\n          columnWidth: '50%',\n          endingShape: 'rounded'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 2\n      },\n      xaxis: {\n        labels: {\n          rotate: -45\n        },\n        categories: ['Apples', 'Oranges', 'Strawberries', 'Pineapples', 'Mangoes', 'Bananas', 'Blackberries', 'Pears', 'Watermelons', 'Cherries', 'Pomegranates', 'Tangerines', 'Papayas'],\n        tickPlacement: 'on'\n      },\n      yaxis: {\n        title: {\n          text: 'Servings'\n        }\n      },\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shade: 'light',\n          type: \"horizontal\",\n          shadeIntensity: 0.25,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 0.85,\n          opacityTo: 0.85,\n          stops: [50, 0, 100]\n        }\n      }\n    };\n    var chart = new ApexCharts(document.querySelector(\"#chart7\"), options);\n    chart.render();\n  };\n  return {\n    init: function init() {\n      chart1();\n      chart2();\n      chart3();\n      chart4();\n      chart5();\n      chart6();\n      chart7();\n    },\n    getRandom: function getRandom() {\n      var i = iteration;\n      return (Math.sin(i / trigoStrength) * (i / trigoStrength) + i / trigoStrength + 1) * (trigoStrength * 2);\n    },\n    getRangeRandom: function getRangeRandom(yrange) {\n      return Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    },\n    generateMinuteWiseTimeSeries: function generateMinuteWiseTimeSeries(baseval, count, yrange) {\n      var i = 0;\n      var series = [];\n      while (i < count) {\n        var x = baseval;\n        var y = (Math.sin(i / trigoStrength) * (i / trigoStrength) + i / trigoStrength + 1) * (trigoStrength * 2);\n        series.push([x, y]);\n        baseval += 300000;\n        i++;\n      }\n      return series;\n    }\n  };\n}();\n$(function () {\n  Apex.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/{% static 'assets/scripts/pages/ch_apexcharts.js\n");

/***/ }),

/***/ 6:
/*!*********************************************************!*\
  !*** multi ./src/{% static 'assets/scripts/pages/ch_apexcharts.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\Downloads\siqtheme-1.0.9\siqtheme-1.0.9\src\assets\scripts\pages\ch_apexcharts.js */"./src/{% static 'assets/scripts/pages/ch_apexcharts.js");


/***/ })

/******/ });